# Learn-X Platform - Complete Docker Compose Setup
# Run with: docker-compose up --build
# Access: http://localhost:3000

version: '3.8'

services:
  # PostgreSQL Database
  database:
    image: postgres:15-alpine
    container_name: learnx-database
    restart: unless-stopped
    environment:
      POSTGRES_DB: learnx
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/01-init.sql:ro
      - ./database/schema.sql:/docker-entrypoint-initdb.d/02-schema.sql:ro
    networks:
      - learnx-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d learnx"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend API Server
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: learnx-backend
    restart: unless-stopped
    environment:
      # Database Configuration
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: learnx
      DB_USER: postgres
      DB_PASSWORD: postgres
      
      # Server Configuration
      PORT: 5000
      NODE_ENV: production
      
      # JWT Configuration
      JWT_SECRET: learnx-super-secret-jwt-key-for-docker-production-2025
      JWT_EXPIRES_IN: 24h
      JWT_REFRESH_SECRET: learnx-refresh-token-secret-for-docker-2025
      JWT_REFRESH_EXPIRES_IN: 7d
      
      # CORS Configuration
      CORS_ORIGIN: http://localhost:3000
      
      # File Upload Configuration
      UPLOAD_MAX_SIZE: 500MB
      UPLOAD_PATH: ./uploads
      
      # AI Configuration - Gemini API
      GEMINI_API_KEY: ${GEMINI_API_KEY:-}
      
      # Rate Limiting
      RATE_LIMIT_WINDOW: 15
      RATE_LIMIT_MAX_REQUESTS: 100
      
      # Logging
      LOG_LEVEL: info
    ports:
      - "5000:5000"
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    networks:
      - learnx-network
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:5000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Frontend Next.js Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: learnx-frontend
    restart: unless-stopped
    environment:
      # API Configuration
      NEXT_PUBLIC_API_URL: http://localhost:5000
      NEXT_PUBLIC_WS_URL: http://localhost:5000
      
      # App Configuration
      NEXT_PUBLIC_APP_NAME: Learn-X
      NEXT_PUBLIC_APP_VERSION: 1.0.0
      NEXT_PUBLIC_APP_DESCRIPTION: AI-Powered Remote Classroom Platform
      
      # Features Toggle
      NEXT_PUBLIC_ENABLE_AI_FEATURES: true
      NEXT_PUBLIC_ENABLE_LIVE_STREAMING: true
      NEXT_PUBLIC_ENABLE_ANALYTICS: true
      
      # Upload Configuration
      NEXT_PUBLIC_MAX_FILE_SIZE: 500MB
      NEXT_PUBLIC_ALLOWED_FILE_TYPES: mp4,avi,mov,wmv,webm,mp3,wav,pdf,doc,docx
      
      # WebRTC Configuration
      NEXT_PUBLIC_STUN_SERVERS: stun:stun.l.google.com:19302,stun:stun1.l.google.com:19302
    ports:
      - "3000:3000"
    networks:
      - learnx-network
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Redis for Caching (Optional but recommended for production)
  redis:
    image: redis:7-alpine
    container_name: learnx-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - learnx-network
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # Nginx Reverse Proxy (Optional for production)
  nginx:
    image: nginx:alpine
    container_name: learnx-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./docker/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    networks:
      - learnx-network
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 3s
      retries: 3

volumes:
  postgres_data:
    driver: local
  backend_uploads:
    driver: local
  backend_logs:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

networks:
  learnx-network:
    driver: bridge
    name: learnx-network
